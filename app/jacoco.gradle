apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("$buildDir/reports")
}

task createDist(type: org.gradle.api.tasks.bundling.Zip, dependsOn: "jacocoTestReport"){
    println "executing"
    archiveName="coverage.zip"
    destinationDir = file('build/reports/jacocoTestReport')
    from (files('./build/reports/jacocoTestReport/html'))
    println destinationDir.getAbsolutePath()
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/*Module.*'
    ]
    // generated classes
    classDirectories.setFrom(fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    ))

    // sources
    sourceDirectories.setFrom(files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]))
    executionData.setFrom(files("$buildDir/jacoco/testDebugUnitTest.exec"))

    // Teamcity service message - if TeamCity has Jacoco plugin then it will be able to
    // ingest the coverage report
    if (project.hasProperty("teamcity")) {
        println "##teamcity[jacocoReport dataPath=\'${buildDir}/jacoco/testDebugUnitTest.exec\' includes=\'com.thundermaps.apilib.android.*\' excludes=\'**/R.class **/R\$*.class **/BuildConfig.* **/Manifest*.*\']"
    }
}
